{"version":3,"sources":["components/Header.js","datatable/Datatable.js","app.js","index.js"],"names":["Header","className","class","Datatable","data","columns","Object","keys","cellPadding","cellSpacing","map","heading","row","column","require","polyfill","App","useState","setData","q","setQ","searchColumns","setSearchColumns","useEffect","fetch","then","response","json","results","rows","type","value","onChange","e","target","checked","includes","previousState","filter","searchColumn","some","toString","toLowerCase","indexOf","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sLA+BeA,EA7BA,WAgBb,OACE,mCACA,yBAAQC,UAAW,MAAnB,UACA,mBAAGC,MAAM,wBACR,iDCnBU,SAASC,EAAT,GAA8B,IAATC,EAAQ,EAARA,KAK5BC,EAAUD,EAAK,IAAME,OAAOC,KAAKH,EAAK,IAC5C,OAEE,wBAAOI,YAAa,EAAGC,YAAa,EAApC,UACE,gCACE,6BACGL,EAAK,IAAMC,EAAQK,KAAI,SAACC,GAAD,OAAa,6BAAKA,WAG9C,gCACGP,EAAKM,KAAI,SAACE,GAAD,OACR,6BACGP,EAAQK,KAAI,SAACG,GAAD,OACX,6BAAKD,EAAIC,kBCdvBC,EAAQ,IAAeC,WACvBD,EAAQ,IAGR,IA6EeE,EA7EH,WAEV,MAAwBC,mBAAS,IAAjC,mBAAOb,EAAP,KAAac,EAAb,KACA,EAAkBD,mBAAS,IAA3B,mBAAOE,EAAP,KAAUC,EAAV,KACA,EAA0CH,mBAAS,CACjD,OACA,eAFF,mBAAOI,EAAP,KAAsBC,EAAtB,KAMAC,qBAAU,WACRC,MAAM,gCAEHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAE5BF,MAAK,SAACE,GAAD,OAAUT,EAAQS,EAAKC,cAC9B,IAoBH,IAdgBC,EAcVxB,EAAUD,EAAK,IAAME,OAAOC,KAAKH,EAAK,IAC5C,OACE,gCACA,cAAC,EAAD,IACE,sBAAKH,UAAU,MAAf,UACE,uBACE6B,KAAK,OAGLC,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAAOb,EAAKa,EAAEC,OAAOH,UAEhC1B,GACCA,EAAQK,KAAI,SAACG,GAAD,OACV,kCAEE,uBAAOZ,UAAU,oBACf6B,KAAK,WAELK,QAASd,EAAce,SAASvB,GAEhCmB,SAAU,SAACC,GACT,IAAME,EAAUd,EAAce,SAASvB,GACvCS,GAAiB,SAACe,GAAD,OACfF,EACIE,EAAcC,QAAO,SAACC,GAAD,OAAkBA,IAAgB1B,KADpD,sBAECwB,GAFD,CAEgBxB,UAI5BA,WAIT,qBAAKZ,UAAU,YAAf,SACE,cAACE,EAAD,CAAWC,MAjDDyB,EAiDczB,EAhDrByB,EAAKS,QAAO,SAAC1B,GAAD,OACjBS,EAAcmB,MACZ,SAAC3B,GAAD,OACED,EAAIC,GACD4B,WACAC,cACAC,QAAQxB,EAAEuB,gBAAkB,iB,MClCzCE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.0daf59f3.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => {\r\n  const changeTheme = () => {\r\n    const header = document.querySelector(\".header\")\r\n    const details = document.querySelectorAll('.details')\r\n    const uls = document.querySelectorAll(\"ul\")\r\n    \r\n    details.forEach((detail) => {\r\n      detail.classList.toggle(\"light-theme\")\r\n    })\r\n    header.classList.toggle(\"light-theme\")\r\n    uls.forEach((ul) => {\r\n      ul.classList.toggle(\"light-theme\")\r\n    })\r\n    document.body.classList.toggle(\"light-theme\")\r\n  }\r\n\r\n  return (\r\n    <>\r\n    <header className= \"m-3\">  \r\n    <i class=\"fas fa-dragon fa-2x\"></i>\r\n     <h1>Datatable</h1>\r\n  \r\n   \r\n      </header>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\n//import data from './products.js'\r\n\r\nexport default function Datatable({ data }) {\r\n /*  How to do it dynamically? \r\n with that we pulling the keys out of that rwo to use that as our headings*/\r\n\r\n // here we use Object.keys wich is going to pull out all of the keys from the json data to use this as our headers.  \r\n  const columns = data[0] && Object.keys(data[0]);\r\n  return (\r\n \r\n    <table cellPadding={0} cellSpacing={0}>\r\n      <thead>\r\n        <tr>\r\n          {data[0] && columns.map((heading) => <th>{heading}</th>)}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {data.map((row) => (\r\n          <tr>\r\n            {columns.map((column) => (\r\n              <td>{row[column]}</td>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\n","import React, { useState, useEffect } from \"react\"\r\n//import \"./country.css\"\r\nimport Header from \"./components/Header\"\r\nimport Datatable from \"./datatable/Datatable.js\"\r\n//import products from './products'\r\n\r\n\r\nrequire('es6-promise').polyfill()\r\nrequire('isomorphic-fetch')\r\n\r\n\r\nconst App = () => {\r\n\r\n  const [data, setData] = useState([]);\r\n  const [q, setQ] = useState('');\r\n  const [searchColumns, setSearchColumns] = useState([\r\n    'name',\r\n    'birth_year',\r\n  ]);\r\n\r\n\r\n  useEffect(() => {\r\n    fetch('https://swapi.dev/api/people')\r\n  \r\n      .then((response) => response.json())\r\n   \r\n      .then((json) => setData(json.results));\r\n  }, []);\r\n\r\n\r\n\r\n  \r\n\r\n  function search(rows) {\r\n    return rows.filter((row) =>\r\n      searchColumns.some(\r\n        (column) =>\r\n          row[column]\r\n            .toString()\r\n            .toLowerCase()\r\n            .indexOf(q.toLowerCase()) > -1,\r\n      ),\r\n    );\r\n  }\r\n\r\n\r\n\r\n  const columns = data[0] && Object.keys(data[0]);\r\n  return (\r\n    <div  >\r\n    <Header/>\r\n      <div className='m-3' >\r\n        <input \r\n          type='text'\r\n        \r\n\r\n          value={q}\r\n          onChange={(e) => setQ(e.target.value)}\r\n        />\r\n        {columns &&\r\n          columns.map((column) => (\r\n            <label >\r\n          \r\n              <input className=\"flexbox checkmark\"\r\n                type='checkbox'\r\n                \r\n                checked={searchColumns.includes(column)}\r\n\r\n                onChange={(e) => {\r\n                  const checked = searchColumns.includes(column);\r\n                  setSearchColumns((previousState) =>\r\n                    checked\r\n                      ? previousState.filter((searchColumn) => searchColumn!== column)\r\n                      : [...previousState, column],\r\n                  );\r\n                }}\r\n              />\r\n              {column}\r\n            </label>\r\n          ))}\r\n      </div>\r\n      <div className=\"datatable\">\r\n        <Datatable data={search(data)} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\nimport './styles.css';\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}